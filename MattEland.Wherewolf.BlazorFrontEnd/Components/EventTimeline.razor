@using MattEland.Wherewolf.BlazorFrontEnd.Helpers
@using MattEland.Wherewolf.Events.Game
@using MattEland.Wherewolf.Events.Social
@using MattEland.Wherewolf.Roles

<MudTimeline TimelineOrientation="TimelineOrientation.Vertical"
             TimelinePosition="TimelinePosition.Left"
             Style="max-height: 70vh; overflow-y: auto;">
    @foreach (var evt in VisibleEvents)
    {
        @switch (evt)
        {
            case GamePhaseAnnouncedEvent announceEvent:
                <MudTimelineItem Color="@CalculateEventColor(evt)" Size="Size.Small" Variant="Variant.Filled">
                    <ItemDot>
                        <MudIcon Size="Size.Small"
                                 Icon="@(announceEvent.AssociatedRole == null ? Icons.Material.Filled.Speaker : announceEvent.AssociatedRole.GetRoleIcon())"/>
                    </ItemDot>
                    <ItemContent>
                        <MudText Color="@CalculateEventColor(evt)">
                            <em>@evt.Description</em>
                        </MudText>
                    </ItemContent>
                </MudTimelineItem>
                break;
            case InsomniacSawFinalCardEvent insomniacEvent:
                <MudTimelineItem Color="@CalculateEventColor(evt)" Size="Size.Small" Variant="Variant.Filled">
                    <ItemDot>
                        <MudIcon Size="Size.Small" Icon="@GameRole.Insomniac.GetRoleIcon()"/>
                    </ItemDot>
                    <ItemContent>
                        <MudText Color="@CalculateEventColor(evt)">
                            <div style="display: flex; flex-direction: row; align-items: center;">
                                <MudText Color="Color.Primary" Inline="true" Class="mr-1">
                                    <strong>@insomniacEvent.PlayerName</strong>
                                </MudText>
                                @if (insomniacEvent.Role == GameRole.Insomniac)
                                {
                                    <MudText Inline="true">
                                        woke and saw they were still the
                                    </MudText>
                                }
                                else
                                {
                                    <MudText Inline="true">
                                        woke and saw they were now the
                                    </MudText>
                                }
                                <MudIcon Size="Size.Medium" Icon="@insomniacEvent.Role.GetRoleIcon()" Class="mx-1"/>
                                <MudText Inline="true">
                                    <strong>@insomniacEvent.Role</strong>
                                </MudText>
                            </div>
                        </MudText>
                    </ItemContent>
                </MudTimelineItem>
                break;

            case DealtCardEvent dealtEvent:
                @if (!dealtEvent.SlotName.StartsWith("Center"))
                {
                    <MudTimelineItem Color="@CalculateEventColor(evt)" Size="Size.Small" Variant="Variant.Filled">
                        <ItemDot>
                            <MudIcon Size="Size.Small" Icon="@dealtEvent.Role.GetRoleIcon()"/>
                        </ItemDot>
                        <ItemContent>
                            <MudText Color="@CalculateEventColor(evt)">
                                <div style="display: flex; flex-direction: row; align-items: center;">
                                    <MudText Color="Color.Primary" Inline="true">
                                        <strong>@dealtEvent.SlotName</strong>
                                    </MudText>
                                    <MudText Inline="true" Class="mx-1">
                                        was dealt
                                    </MudText>
                                    <MudIcon Size="Size.Medium" Icon="@dealtEvent.Role.GetRoleIcon()" Class="mx-1"/>
                                    <MudText Inline="true">
                                        <strong>@dealtEvent.Role</strong>
                                    </MudText>
                                </div>
                            </MudText>
                        </ItemContent>
                    </MudTimelineItem>
                }

                break;
            case RobbedPlayerEvent robEvent:
                <MudTimelineItem Color="@robEvent.NewRole.GetTeamColor()" Size="Size.Small" Variant="Variant.Filled">
                    <ItemDot>
                        <MudIcon Size="Size.Small" Icon="@GameRole.Robber.GetRoleIcon()"/>
                    </ItemDot>
                    <ItemContent>
                        <MudText Color="@CalculateEventColor(evt)">
                            <div style="display: flex; flex-direction: row; align-items: center;">
                                <MudText Color="Color.Primary" Inline="true">
                                    <strong>@robEvent.PlayerName</strong>
                                </MudText>
                                <MudText Inline="true" Class="mx-1">
                                    stole the
                                </MudText>
                                <MudIcon Size="Size.Medium" Icon="@robEvent.NewRole.GetRoleIcon()" Class="mx-1"/>
                                <MudText Inline="true">
                                    <strong>@robEvent.NewRole</strong>
                                </MudText>
                                <MudText Inline="true" Class="mx-1">
                                    role from
                                </MudText>
                                <MudText Color="Color.Primary" Inline="true">
                                    <strong>@robEvent.TargetName</strong>
                                </MudText>
                            </div>
                        </MudText>

                    </ItemContent>
                </MudTimelineItem>
                break;
            case VillagerNoActionClaim roleClaim:
                <MudTimelineItem Color="@CalculateEventColor(evt)" Size="Size.Small" Variant="Variant.Filled">
                    <ItemDot>
                        <MudIcon Size="Size.Small" Icon="@roleClaim.Role.GetRoleIcon()"/>
                    </ItemDot>
                    <ItemContent>
                        <div>
                            <MudText Color="@CalculateEventColor(evt)">
                                <div style="display: flex; flex-direction: row; align-items: center;">
                                    <PlayerIndicator PlayerName="@roleClaim.Player.Name" />
                                    <MudText Inline="true" Class="mx-1">
                                        claimed they started as the
                                    </MudText>
                                    <RoleIndicator Role="@roleClaim.Role"/>
                                    <MudText Inline="true" Class="mx-1">
                                        and took no action
                                    </MudText>
                                    <LieTruthIndicator IsTruth="@roleClaim.EvaluateTruthfulness(Game, Perspective)" />
                                </div>
                            </MudText>
                        </div>
                    </ItemContent>
                </MudTimelineItem>
                break;
            case InsomniacWakeClaim roleClaim:
                <MudTimelineItem Color="@CalculateEventColor(evt)" Size="Size.Small" Variant="Variant.Filled">
                    <ItemDot>
                        <MudIcon Size="Size.Small" Icon="@roleClaim.Role.GetRoleIcon()"/>
                    </ItemDot>
                    <ItemContent>
                        <div>
                            <MudText Color="@CalculateEventColor(evt)">
                                <div style="display: flex; flex-direction: row; align-items: center;">
                                    <PlayerIndicator PlayerName="@roleClaim.Player.Name" />
                                    <MudText Inline="true" Class="mx-1">
                                        claimed they started as the
                                    </MudText>
                                    <RoleIndicator Role="@roleClaim.Role"/>
                                    @if (roleClaim.FinalRole == GameRole.Insomniac)
                                    {
                                        <MudText Inline="true" Class="ml-1">
                                            and still are.
                                        </MudText>
                                    }
                                    else
                                    {
                                        <MudText Inline="true" Class="mx-1">
                                            but are now the
                                        </MudText>
                                        <RoleIndicator Role="@roleClaim.FinalRole"/>
                                    }
                                    <LieTruthIndicator IsTruth="@roleClaim.EvaluateTruthfulness(Game, Perspective)" />
                                </div>
                            </MudText>
                        </div>
                    </ItemContent>
                </MudTimelineItem>
                break;            
            case RobberRobbedClaim roleClaim:
                <MudTimelineItem Color="@CalculateEventColor(evt)" Size="Size.Small" Variant="Variant.Filled">
                    <ItemDot>
                        <MudIcon Size="Size.Small" Icon="@roleClaim.Role.GetRoleIcon()"/>
                    </ItemDot>
                    <ItemContent>
                        <div>
                            <MudText Color="@CalculateEventColor(evt)">
                                <div style="display: flex; flex-direction: row; align-items: center;">
                                    <PlayerIndicator PlayerName="@roleClaim.Player.Name" />
                                    <MudText Inline="true" Class="mx-1">
                                        claimed they started as the
                                    </MudText>
                                    <RoleIndicator Role="@roleClaim.Role"/>
                                    <MudText Inline="true" Class="ml-1">
                                        and stole
                                    </MudText>
                                    <RoleIndicator Role="@roleClaim.StolenRole"/>
                                    <MudText Inline="true" Class="mx-1">
                                        from
                                    </MudText>
                                    <PlayerIndicator PlayerName="@roleClaim.Target.Name" />
                                    <LieTruthIndicator IsTruth="@roleClaim.EvaluateTruthfulness(Game, Perspective)" />
                                </div>
                            </MudText>
                        </div>
                    </ItemContent>
                </MudTimelineItem>
                break;
            case WokeWithWerewolvesClaim roleClaim:
                <MudTimelineItem Color="@CalculateEventColor(evt)" Size="Size.Small" Variant="Variant.Filled">
                    <ItemDot>
                        <MudIcon Size="Size.Small" Icon="@roleClaim.Role.GetRoleIcon()"/>
                    </ItemDot>
                    <ItemContent>
                        <div>
                            <MudText Color="@CalculateEventColor(evt)">
                                <div style="display: flex; flex-direction: row; align-items: center;">
                                    <PlayerIndicator PlayerName="@roleClaim.Player.Name" />
                                    <MudText Inline="true" Class="mx-1">
                                        claimed they started as the
                                    </MudText>
                                    <RoleIndicator Role="@roleClaim.Role"/>
                                    <MudText Inline="true" Class="mx-1">
                                        and the rest of the <strong>Werewolf</strong> team includes
                                    </MudText>
                                    @foreach (var player in roleClaim.OtherWerewolves)
                                    {
                                        <PlayerIndicator PlayerName="@player.Name" />
                                    }
                                    <LieTruthIndicator IsTruth="@roleClaim.EvaluateTruthfulness(Game, Perspective)" />
                                </div>
                            </MudText>
                        </div>
                    </ItemContent>
                </MudTimelineItem>
                break;
            case LoneWerewolfClaim roleClaim:
                <MudTimelineItem Color="@CalculateEventColor(evt)" Size="Size.Small" Variant="Variant.Filled">
                    <ItemDot>
                        <MudIcon Size="Size.Small" Icon="@roleClaim.Role.GetRoleIcon()"/>
                    </ItemDot>
                    <ItemContent>
                        <div>
                            <MudText Color="@CalculateEventColor(evt)">
                                <div style="display: flex; flex-direction: row; align-items: center;">
                                    <PlayerIndicator PlayerName="@roleClaim.Player.Name" />
                                    <MudText Inline="true" Class="mx-1">
                                        claimed they started as the
                                    </MudText>
                                    <RoleIndicator Role="@roleClaim.Role"/>
                                    <MudText Inline="true" Class="mx-1">
                                        and were the only one on the <strong>Werewolf</strong> team. They looked at 
                                    </MudText>
                                    <MudText Color="Color.Primary" Inline="true" Class="mx-1">
                                        <strong>@roleClaim.CenterSlot.Name</strong>
                                    </MudText>
                                    <MudText Inline="true" Class="mx-1">
                                        and saw
                                    </MudText>
                                    <RoleIndicator Role="@roleClaim.ObservedRole" />
                                    <LieTruthIndicator IsTruth="@roleClaim.EvaluateTruthfulness(Game, Perspective)" />
                                </div>
                            </MudText>
                        </div>
                    </ItemContent>
                </MudTimelineItem>
                break;
            case StartRoleClaimedEvent claimEvent:
                <MudTimelineItem Color="@CalculateEventColor(evt)" Size="Size.Small" Variant="Variant.Filled">
                    <ItemDot>
                        <MudIcon Size="Size.Small" Icon="@claimEvent.ClaimedRole.GetRoleIcon()"/>
                    </ItemDot>
                    <ItemContent>
                        <div>
                            <MudText Color="@CalculateEventColor(evt)">
                                <div style="display: flex; flex-direction: row; align-items: center;">
                                    <PlayerIndicator PlayerName="@claimEvent.Player.Name" />
                                    <MudText Inline="true" Class="mx-1">
                                        claimed they started as the
                                    </MudText>
                                    <RoleIndicator Role="@claimEvent.ClaimedRole"/>
                                    @if (Game.IsGameOver || Perspective is null)
                                    {
                                        <LieTruthIndicator IsTruth="@claimEvent.IsClaimValidFor(Game)" />
                                    }
                                    else if (Probabilities is not null)
                                    {
                                        if (!claimEvent.CanBeBelievedBy(Game, Probabilities))
                                        {
                                            <LieTruthIndicator IsTruth="false" />
                                        }
                                        else if (claimEvent.CannotBeFalse(Game, Probabilities))
                                        {
                                            <LieTruthIndicator IsTruth="true" />
                                        }
                                    }
                                </div>
                            </MudText>
                            @if (Game.IsGameOver || claimEvent.Player == Perspective)
                            {
                                <MudDivider Class="my-2"/>
                                <RoleClaimProbabilityTable Game="@claimEvent.GameState"
                                                           PerspectivePlayer="@claimEvent.Player"
                                                           Claim="@claimEvent.ClaimedRole"
                                                           AllowClaimingRole="false"/>
                            }
                        </div>
                    </ItemContent>
                </MudTimelineItem>
                break;
            case VotedEvent voteEvent:
                <MudTimelineItem Color="@CalculateEventColor(evt)" Size="Size.Small" Variant="Variant.Filled">
                    <ItemDot>
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.HowToVote"/>
                    </ItemDot>
                    <ItemContent>
                        <MudPaper>
                            <MudText Color="@CalculateEventColor(evt)">
                                <PlayerIndicator PlayerName="@voteEvent.VotingPlayer.Name" />
                                <MudText Inline="true">voted for</MudText>
                                <PlayerIndicator PlayerName="@voteEvent.TargetPlayer.Name" />
                            </MudText>
                            <MudDivider Class="my-2"/>
                            <VoteVictoryTable Game="@Game"
                                              VotedPlayer="@voteEvent.TargetPlayer"
                                              Probabilities="@voteEvent.Probabilities"
                                              PerspectivePlayer="@voteEvent.VotingPlayer"
                                              AllowVoting="false"/>
                        </MudPaper>
                    </ItemContent>
                </MudTimelineItem>
                break;
            case GameOverEvent gameOverEvent:
                <MudTimelineItem Color="@CalculateEventColor(evt)" Size="Size.Small" Variant="Variant.Filled">
                    <ItemDot>
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Flag"/>
                    </ItemDot>
                    <ItemContent>
                        <MudText Color="@CalculateEventColor(evt)">
                            The <strong>@gameOverEvent.AssociatedTeam</strong> team has won!
                        </MudText>
                    </ItemContent>
                </MudTimelineItem>
                break;
            case VotedOutEvent votedOutEvent:
                <MudTimelineItem Color="@CalculateEventColor(evt)" Size="Size.Small" Variant="Variant.Filled">
                    <ItemDot>
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Block"/>
                    </ItemDot>
                    <ItemContent>
                        <MudText Color="@CalculateEventColor(evt)">
                            <div style="display: flex; flex-direction: row; align-items: center;">
                                <PlayerIndicator PlayerName="@votedOutEvent.Player.Name" />
                                <MudText Inline="true" Class="mx-1">
                                    was voted out as the
                                </MudText>
                                <MudIcon Size="Size.Medium" Icon="@votedOutEvent.Role.GetRoleIcon()" Class="mx-1"
                                         Color="@votedOutEvent.Role.GetTeamColor()"/>
                                <MudText Inline="true" Color="@votedOutEvent.Role.GetTeamColor()">
                                    <strong>@votedOutEvent.Role</strong>
                                </MudText>
                            </div>
                        </MudText>
                    </ItemContent>
                </MudTimelineItem>
                break;
            case LoneWolfLookedAtSlotEvent loneEvent:
                <MudTimelineItem Color="@CalculateEventColor(evt)" Size="Size.Small" Variant="Variant.Filled">
                    <ItemDot>
                        <MudIcon Size="Size.Small" Icon="@GameRole.Werewolf.GetRoleIcon()"/>
                    </ItemDot>
                    <ItemContent>
                        <MudText Color="@CalculateEventColor(evt)">
                            <div style="display: flex; flex-direction: row; align-items: center;">
                                <PlayerIndicator PlayerName="@loneEvent.PlayerName" />
                                <MudText Inline="true" Class="mx-1">
                                    looked at slot
                                </MudText>
                                <MudText Color="Color.Primary" Inline="true">
                                    <strong>@loneEvent.SlotName</strong>
                                </MudText>
                                <MudText Inline="true" Class="mx-1">
                                    as the lone wolf and saw that it was a
                                </MudText>
                                <MudIcon Size="Size.Medium" Icon="@loneEvent.ObservedRole.GetRoleIcon()" Class="mx-1"
                                         Color="@loneEvent.ObservedRole.GetTeamColor()"/>
                                <MudText Inline="true" Color="@loneEvent.ObservedRole.GetTeamColor()">
                                    <strong>@loneEvent.ObservedRole</strong>
                                </MudText>
                            </div>
                        </MudText>
                    </ItemContent>
                </MudTimelineItem>
                break;
            case SawOtherWolvesEvent sawWolfEvent:
                <MudTimelineItem Color="@CalculateEventColor(evt)" Size="Size.Small" Variant="Variant.Filled">
                    <ItemDot>
                        <MudIcon Size="Size.Small" Icon="@GameRole.Werewolf.GetRoleIcon()"/>
                    </ItemDot>
                    <ItemContent>
                        <MudText Color="@CalculateEventColor(evt)">
                            <div style="display: flex; flex-direction: row; align-items: center;">
                                @foreach (var player in sawWolfEvent.Players)
                                {
                                    @if (player != sawWolfEvent.Players.First())
                                    {
                                        <MudText Inline="true" Class="mx-1">
                                            and
                                        </MudText>
                                    }

                                    <PlayerIndicator PlayerName="@player" />
                                }
                                <MudText Inline="true" Class="mx-1">
                                    saw each other on the <strong>Werewolf</strong> team.
                                </MudText>
                            </div>
                        </MudText>
                    </ItemContent>
                </MudTimelineItem>
                break;
            default:
                <MudTimelineItem Color="@CalculateEventColor(evt)" Size="Size.Small" Variant="Variant.Filled">
                    <ItemContent>
                        <MudText Color="@CalculateEventColor(evt)">
                            @evt.Description 
                            <MudText Color="Color.Dark" Typo="Typo.caption">(@evt.GetType().Name)</MudText>
                        </MudText>
                    </ItemContent>
                </MudTimelineItem>
                break;
        }
    }
</MudTimeline>